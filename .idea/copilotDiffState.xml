<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/torneo-futnorte-api/src/main/java/com/futnorte/torneo/application/services/EnfrentamientoService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/torneo-futnorte-api/src/main/java/com/futnorte/torneo/application/services/EnfrentamientoService.java" />
              <option name="originalContent" value="package com.futnorte.torneo.application.services;&#10;&#10;import com.futnorte.torneo.application.dto.ActualizarEnfrentamientoApplicationDTO;&#10;import com.futnorte.torneo.application.dto.EnfrentamientoResponseDTO;&#10;import com.futnorte.torneo.application.dto.GolesJugadorApplicationDTO;&#10;import com.futnorte.torneo.application.dto.GolesJugadorResponseDTO;&#10;import com.futnorte.torneo.application.mapper.EnfrentamientoApplicationMapper;&#10;import com.futnorte.torneo.application.validators.EnfrentamientoValidator;&#10;import com.futnorte.torneo.domain.entities.Enfrentamiento;&#10;import com.futnorte.torneo.domain.entities.EstadoEnfrentamiento;&#10;import com.futnorte.torneo.domain.entities.GolesJugador;&#10;import com.futnorte.torneo.domain.entities.Jugador;&#10;import com.futnorte.torneo.domain.exceptions.EntityNotFoundException;&#10;import com.futnorte.torneo.domain.ports.in.EnfrentamientoUseCase;&#10;import com.futnorte.torneo.domain.ports.in.EstadisticasEquipoUseCase;&#10;import com.futnorte.torneo.domain.ports.in.GolesJugadorUseCase;&#10;import com.futnorte.torneo.domain.ports.in.JugadorUseCase;&#10;import com.futnorte.torneo.domain.ports.out.EnfrentamientoRepositoryPort;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.util.Pair;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.*;&#10;import java.util.function.Function;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@RequiredArgsConstructor&#10;@Service&#10;@Transactional&#10;public class EnfrentamientoService implements EnfrentamientoUseCase {&#10;&#10;    private final EnfrentamientoRepositoryPort enfrentamientoRepositoryPort;&#10;    private final EnfrentamientoValidator enfrentamientoValidator;&#10;    private final EstadisticasEquipoUseCase estadisticasEquipoUseCase;&#10;    private final GolesJugadorUseCase golesJugadorUseCase;&#10;    private final JugadorUseCase jugadorUseCase;&#10;    private final EnfrentamientoApplicationMapper enfrentamientoApplicationMapper;&#10;&#10;    private record GolesEquipo(List&lt;GolesJugadorResponseDTO&gt; golesLocal, List&lt;GolesJugadorResponseDTO&gt; golesVisitante) {&#10;    }&#10;&#10;    @Override&#10;    public EnfrentamientoResponseDTO crearEnfrentamiento(Long torneoId, Long equipoLocalId, Long equipoVisitanteId,&#10;                                                         LocalDateTime fechaHora, String cancha) {&#10;&#10;        enfrentamientoValidator.validarCreacionEnfrentamiento(torneoId, equipoLocalId, equipoVisitanteId);&#10;        Enfrentamiento enfrentamiento = new Enfrentamiento(torneoId, equipoLocalId, equipoVisitanteId, fechaHora, cancha);&#10;        enfrentamiento.validarEnfrentamiento();&#10;&#10;        log.info(&quot;Creando enfrentamiento torneoId={}, local={}, visitante={}&quot;, torneoId, equipoLocalId, equipoVisitanteId);&#10;&#10;        Enfrentamiento enfrentamientoGuardado = enfrentamientoRepositoryPort.save(enfrentamiento);&#10;&#10;        return enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                enfrentamientoGuardado,&#10;                null,&#10;                null);&#10;&#10;    }&#10;&#10;    @Override&#10;    public EnfrentamientoResponseDTO actualizarEnfrentamiento(ActualizarEnfrentamientoApplicationDTO actualizarEnfrentamientoApplicationDTO) {&#10;&#10;        Enfrentamiento enfrentamiento = buscarEnfrentamiento(actualizarEnfrentamientoApplicationDTO.enfrentamientoId());&#10;        EstadoEnfrentamiento estadoPrevio = enfrentamiento.getEstado();&#10;&#10;        revertirEstadisticasSiYaFinalizado(enfrentamiento, estadoPrevio);&#10;&#10;        List&lt;GolesJugador&gt; golesExistentes = obtenerGolesExistentes(actualizarEnfrentamientoApplicationDTO.enfrentamientoId());&#10;&#10;        aplicarActualizacionEnfrentamiento(actualizarEnfrentamientoApplicationDTO, enfrentamiento);&#10;&#10;        if (actualizarEnfrentamientoApplicationDTO.esPartidoFinalizado()) {&#10;            aplicarActualizacionEstadisticas(enfrentamiento);&#10;        }&#10;&#10;        Enfrentamiento enfrentamientoGuardado = enfrentamientoRepositoryPort.save(enfrentamiento);&#10;&#10;        if (actualizarEnfrentamientoApplicationDTO.tieneNuevosGolesElEnfrentamiento()) {&#10;            procesarGolesJugadoresEnfrentamiento(&#10;                    enfrentamientoGuardado,&#10;                    actualizarEnfrentamientoApplicationDTO.golesJugadoresLocal(),&#10;                    actualizarEnfrentamientoApplicationDTO.golesJugadoresVisitante(),&#10;                    golesExistentes&#10;            );&#10;        } else if (esOtroEstadoDiferenteAFinalizado(actualizarEnfrentamientoApplicationDTO, estadoPrevio)) {&#10;            procesarGolesJugadoresEnfrentamiento(&#10;                    enfrentamientoGuardado,&#10;                    Collections.emptyList(),&#10;                    Collections.emptyList(),&#10;                    golesExistentes&#10;            );&#10;        }&#10;&#10;        return enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                enfrentamientoGuardado,&#10;                mapearGolesPorEquipo(enfrentamientoGuardado).getFirst(),&#10;                mapearGolesPorEquipo(enfrentamientoGuardado).getSecond()&#10;        );&#10;&#10;    }&#10;&#10;    private boolean esOtroEstadoDiferenteAFinalizado(ActualizarEnfrentamientoApplicationDTO actualizarEnfrentamientoApplicationDTO, EstadoEnfrentamiento estadoPrevio) {&#10;        return estadoPrevio == EstadoEnfrentamiento.FINALIZADO &amp;&amp; actualizarEnfrentamientoApplicationDTO.estadoEnfrentamiento() != EstadoEnfrentamiento.FINALIZADO;&#10;    }&#10;&#10;    @Override&#10;    @Transactional(readOnly = true)&#10;    public Optional&lt;EnfrentamientoResponseDTO&gt; obtenerEnfrentamientoPorId(Long enfrentamientoId) {&#10;        return enfrentamientoRepositoryPort.findById(enfrentamientoId)&#10;                .map(enfrentamiento -&gt; enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                        enfrentamiento,&#10;                        mapearGolesPorEquipo(enfrentamiento).getFirst(),&#10;                        mapearGolesPorEquipo(enfrentamiento).getSecond()&#10;                ));&#10;    }&#10;&#10;    @Override&#10;    @Transactional(readOnly = true)&#10;    public List&lt;EnfrentamientoResponseDTO&gt; obtenerEnfrentamientosPorTorneo(Long torneoId) {&#10;        return enfrentamientoRepositoryPort.findByTorneoId(torneoId)&#10;                .stream()&#10;                .map(enfrentamiento -&gt; enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                        enfrentamiento,&#10;                        mapearGolesPorEquipo(enfrentamiento).getFirst(),&#10;                        mapearGolesPorEquipo(enfrentamiento).getSecond()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    @Transactional(readOnly = true)&#10;    public List&lt;EnfrentamientoResponseDTO&gt; obtenerEnfrentamientosPorEquipo(Long equipoId) {&#10;        return enfrentamientoRepositoryPort.findByEquipoLocalIdOrEquipoVisitanteId(equipoId, equipoId)&#10;                .stream()&#10;                .map(enfrentamiento -&gt; enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                        enfrentamiento,&#10;                        mapearGolesPorEquipo(enfrentamiento).getFirst(),&#10;                        mapearGolesPorEquipo(enfrentamiento).getSecond()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    @Transactional(readOnly = true)&#10;    public List&lt;EnfrentamientoResponseDTO&gt; obtenerEnfrentamientosPorFecha(LocalDateTime fechaInicio, LocalDateTime fechaFin) {&#10;        return enfrentamientoRepositoryPort.findByFechaHoraBetween(fechaInicio, fechaFin)&#10;                .stream()&#10;                .map(enfrentamiento -&gt; enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                        enfrentamiento,&#10;                        mapearGolesPorEquipo(enfrentamiento).getFirst(),&#10;                        mapearGolesPorEquipo(enfrentamiento).getSecond()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void eliminarEnfrentamiento(Long enfrentamientoId) {&#10;        log.info(&quot;Iniciando proceso de eliminación del enfrentamiento ID: {}&quot;, enfrentamientoId);&#10;&#10;        Enfrentamiento enfrentamiento = buscarEnfrentamiento(enfrentamientoId);&#10;&#10;        // Si está finalizado, revertir las estadísticas&#10;        if (enfrentamiento.getEstado() == EstadoEnfrentamiento.FINALIZADO) {&#10;            log.info(&quot;Revirtiendo estadísticas del enfrentamiento finalizado ID: {}&quot;, enfrentamientoId);&#10;            aplicarRevertirEstadisticasEquipos(enfrentamiento);&#10;        }&#10;&#10;        // Eliminar los goles asociados&#10;        log.debug(&quot;Eliminando goles asociados al enfrentamiento ID: {}&quot;, enfrentamientoId);&#10;        golesJugadorUseCase.eliminarGolesJugadoresPorEnfrentamiento(enfrentamientoId);&#10;&#10;        // Eliminar el enfrentamiento&#10;        log.info(&quot;Eliminando enfrentamiento ID: {}&quot;, enfrentamientoId);&#10;        enfrentamientoRepositoryPort.deleteById(enfrentamientoId);&#10;&#10;        log.info(&quot;Enfrentamiento ID: {} eliminado exitosamente&quot;, enfrentamientoId);&#10;    }&#10;&#10;    private Pair&lt;List&lt;GolesJugadorResponseDTO&gt;, List&lt;GolesJugadorResponseDTO&gt;&gt; mapearGolesPorEquipo(Enfrentamiento enfrentamiento) {&#10;        List&lt;GolesJugador&gt; golesJugadores = obtenerGolesJugadores(enfrentamiento.getId());&#10;        if (golesJugadores.isEmpty()) {&#10;            return Pair.of(Collections.emptyList(), Collections.emptyList());&#10;        }&#10;&#10;        Map&lt;Long, Jugador&gt; jugadoresMap = obtenerMapaJugadores(golesJugadores);&#10;        GolesEquipo golesEquipo = separarGolesPorEquipo(golesJugadores, jugadoresMap, enfrentamiento);&#10;&#10;        return Pair.of(golesEquipo.golesLocal(), golesEquipo.golesVisitante());&#10;    }&#10;&#10;    private List&lt;GolesJugador&gt; obtenerGolesJugadores(Long enfrentamientoId) {&#10;        log.debug(&quot;Obteniendo goles para enfrentamiento id={}&quot;, enfrentamientoId);&#10;        return golesJugadorUseCase.obtenerGolesJugadoresPorEnfrentamiento(enfrentamientoId);&#10;    }&#10;&#10;    private Map&lt;Long, Jugador&gt; obtenerMapaJugadores(List&lt;GolesJugador&gt; golesJugadores) {&#10;        List&lt;Long&gt; jugadorIds = golesJugadores.stream()&#10;                .map(GolesJugador::getJugadorId)&#10;                .toList();&#10;&#10;        List&lt;Jugador&gt; jugadores = jugadorUseCase.buscarJugadoresPorIds(jugadorIds);&#10;        log.debug(&quot;Encontrados {} jugadores de {} solicitados&quot;, jugadores.size(), jugadorIds.size());&#10;&#10;        return jugadores.stream()&#10;                .collect(Collectors.toMap(Jugador::getId, Function.identity()));&#10;    }&#10;&#10;    private GolesEquipo separarGolesPorEquipo(List&lt;GolesJugador&gt; golesJugadores,&#10;                                              Map&lt;Long, Jugador&gt; jugadoresMap,&#10;                                              Enfrentamiento enfrentamiento) {&#10;        List&lt;GolesJugadorResponseDTO&gt; golesLocal = new ArrayList&lt;&gt;();&#10;        List&lt;GolesJugadorResponseDTO&gt; golesVisitante = new ArrayList&lt;&gt;();&#10;&#10;        for (GolesJugador gol : golesJugadores) {&#10;            Jugador jugador = jugadoresMap.get(gol.getJugadorId());&#10;            if (jugador == null) {&#10;                log.warn(&quot;Jugador con id {} no encontrado para goles&quot;, gol.getJugadorId());&#10;                continue;&#10;            }&#10;&#10;            GolesJugadorResponseDTO dto = crearGolesJugadorDTO(jugador, gol);&#10;            asignarGolesAEquipo(dto, jugador, enfrentamiento, golesLocal, golesVisitante);&#10;        }&#10;&#10;        return new GolesEquipo(golesLocal, golesVisitante);&#10;    }&#10;&#10;    private GolesJugadorResponseDTO crearGolesJugadorDTO(Jugador jugador, GolesJugador gol) {&#10;        return new GolesJugadorResponseDTO(&#10;                jugador.getId(),&#10;                jugador.getNombre(),&#10;                jugador.getApellido(),&#10;                gol.getCantidadGoles()&#10;        );&#10;    }&#10;&#10;    private void asignarGolesAEquipo(GolesJugadorResponseDTO dto,&#10;                                     Jugador jugador,&#10;                                     Enfrentamiento enfrentamiento,&#10;                                     List&lt;GolesJugadorResponseDTO&gt; golesLocal,&#10;                                     List&lt;GolesJugadorResponseDTO&gt; golesVisitante) {&#10;        if (jugador.getEquipoId().equals(enfrentamiento.getEquipoLocalId())) {&#10;            golesLocal.add(dto);&#10;        } else if (jugador.getEquipoId().equals(enfrentamiento.getEquipoVisitanteId())) {&#10;            golesVisitante.add(dto);&#10;        } else {&#10;            log.warn(&quot;Jugador {} no pertenece al enfrentamiento {}&quot;, jugador.getId(), enfrentamiento.getId());&#10;        }&#10;    }&#10;&#10;    private void revertirEstadisticasSiYaFinalizado(Enfrentamiento enfrentamiento, EstadoEnfrentamiento estadoPrevio) {&#10;        if (estadoPrevio == EstadoEnfrentamiento.FINALIZADO) {&#10;            log.info(&quot;Revirtiendo estadísticas para enfrentamiento {} (Local: {}, Visitante: {})&quot;,&#10;                    enfrentamiento.getId(),&#10;                    enfrentamiento.getEquipoLocalId(),&#10;                    enfrentamiento.getEquipoVisitanteId());&#10;            aplicarRevertirEstadisticasEquipos(enfrentamiento);&#10;        }&#10;    }&#10;&#10;    private void aplicarRevertirEstadisticasEquipos(Enfrentamiento enfrentamiento) {&#10;        estadisticasEquipoUseCase.revertirEstadisticasEquipo(&#10;                enfrentamiento.getGolesLocal(),&#10;                enfrentamiento.getGolesVisitante(),&#10;                enfrentamiento.getEquipoLocalId(),&#10;                enfrentamiento.getEquipoVisitanteId()&#10;        );&#10;    }&#10;&#10;    private void aplicarActualizacionEstadisticas(Enfrentamiento enfrentamiento) {&#10;        estadisticasEquipoUseCase.actualizarEstadisticas(&#10;                enfrentamiento.getEquipoLocalId(),&#10;                enfrentamiento.getEquipoVisitanteId(),&#10;                enfrentamiento.getGolesLocal(),&#10;                enfrentamiento.getGolesVisitante());&#10;    }&#10;&#10;    private void aplicarActualizacionEnfrentamiento(ActualizarEnfrentamientoApplicationDTO actualizarEnfrentamientoApplicationDTO, Enfrentamiento enfrentamiento) {&#10;        enfrentamiento.actualizar(&#10;                actualizarEnfrentamientoApplicationDTO.fechaHora(),&#10;                actualizarEnfrentamientoApplicationDTO.cancha(),&#10;                actualizarEnfrentamientoApplicationDTO.estadoEnfrentamiento(),&#10;                actualizarEnfrentamientoApplicationDTO.golesLocal(),&#10;                actualizarEnfrentamientoApplicationDTO.golesVisitante()&#10;        );&#10;    }&#10;&#10;    private void procesarGolesJugadoresEnfrentamiento(Enfrentamiento enfrentamiento,&#10;                                                      List&lt;GolesJugadorApplicationDTO&gt; golesJugadoresLocal,&#10;                                                      List&lt;GolesJugadorApplicationDTO&gt; golesJugadoresVisitante,&#10;                                                      List&lt;GolesJugador&gt; golesExistentes) {&#10;        golesJugadorUseCase.procesarGolesJugadores(&#10;                enfrentamiento.getId(),&#10;                enfrentamiento.getEquipoLocalId(),&#10;                enfrentamiento.getEquipoVisitanteId(),&#10;                golesJugadoresLocal,&#10;                golesJugadoresVisitante,&#10;                golesExistentes&#10;        );&#10;    }&#10;&#10;    private List&lt;GolesJugador&gt; obtenerGolesExistentes(Long idEnfrentamiento) {&#10;        return golesJugadorUseCase.obtenerGolesJugadoresPorEnfrentamiento(idEnfrentamiento);&#10;    }&#10;&#10;    private Enfrentamiento buscarEnfrentamiento(Long enfrentamientoId) {&#10;        return enfrentamientoRepositoryPort.findById(enfrentamientoId)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Enfrentamiento&quot;, enfrentamientoId));&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.futnorte.torneo.application.services;&#10;&#10;import com.futnorte.torneo.application.dto.ActualizarEnfrentamientoApplicationDTO;&#10;import com.futnorte.torneo.application.dto.EnfrentamientoResponseDTO;&#10;import com.futnorte.torneo.application.dto.GolesJugadorApplicationDTO;&#10;import com.futnorte.torneo.application.dto.GolesJugadorResponseDTO;&#10;import com.futnorte.torneo.application.mapper.EnfrentamientoApplicationMapper;&#10;import com.futnorte.torneo.application.validators.EnfrentamientoValidator;&#10;import com.futnorte.torneo.domain.entities.Enfrentamiento;&#10;import com.futnorte.torneo.domain.entities.EstadoEnfrentamiento;&#10;import com.futnorte.torneo.domain.entities.GolesJugador;&#10;import com.futnorte.torneo.domain.entities.Jugador;&#10;import com.futnorte.torneo.domain.exceptions.EntityNotFoundException;&#10;import com.futnorte.torneo.domain.ports.in.EnfrentamientoUseCase;&#10;import com.futnorte.torneo.domain.ports.in.EstadisticasEquipoUseCase;&#10;import com.futnorte.torneo.domain.ports.in.GolesJugadorUseCase;&#10;import com.futnorte.torneo.domain.ports.in.JugadorUseCase;&#10;import com.futnorte.torneo.domain.ports.out.EnfrentamientoRepositoryPort;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.util.Pair;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.*;&#10;import java.util.function.Function;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@RequiredArgsConstructor&#10;@Service&#10;@Transactional&#10;public class EnfrentamientoService implements EnfrentamientoUseCase {&#10;&#10;    private final EnfrentamientoRepositoryPort enfrentamientoRepositoryPort;&#10;    private final EnfrentamientoValidator enfrentamientoValidator;&#10;    private final EstadisticasEquipoUseCase estadisticasEquipoUseCase;&#10;    private final GolesJugadorUseCase golesJugadorUseCase;&#10;    private final JugadorUseCase jugadorUseCase;&#10;    private final EnfrentamientoApplicationMapper enfrentamientoApplicationMapper;&#10;&#10;    private record GolesEquipo(List&lt;GolesJugadorResponseDTO&gt; golesLocal, List&lt;GolesJugadorResponseDTO&gt; golesVisitante) {&#10;    }&#10;&#10;    @Override&#10;    public EnfrentamientoResponseDTO crearEnfrentamiento(Long torneoId, Long equipoLocalId, Long equipoVisitanteId,&#10;                                                         LocalDateTime fechaHora, String cancha) {&#10;&#10;        enfrentamientoValidator.validarCreacionEnfrentamiento(torneoId, equipoLocalId, equipoVisitanteId);&#10;        Enfrentamiento enfrentamiento = new Enfrentamiento(torneoId, equipoLocalId, equipoVisitanteId, fechaHora, cancha);&#10;        enfrentamiento.validarEnfrentamiento();&#10;&#10;        log.info(&quot;Creando enfrentamiento torneoId={}, local={}, visitante={}&quot;, torneoId, equipoLocalId, equipoVisitanteId);&#10;&#10;        Enfrentamiento enfrentamientoGuardado = enfrentamientoRepositoryPort.save(enfrentamiento);&#10;&#10;        return enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                enfrentamientoGuardado,&#10;                null,&#10;                null);&#10;&#10;    }&#10;&#10;    @Override&#10;    public EnfrentamientoResponseDTO actualizarEnfrentamiento(ActualizarEnfrentamientoApplicationDTO actualizarEnfrentamientoApplicationDTO) {&#10;&#10;        Enfrentamiento enfrentamiento = buscarEnfrentamiento(actualizarEnfrentamientoApplicationDTO.enfrentamientoId());&#10;        EstadoEnfrentamiento estadoPrevio = enfrentamiento.getEstado();&#10;&#10;        revertirEstadisticasSiYaFinalizado(enfrentamiento, estadoPrevio);&#10;&#10;        List&lt;GolesJugador&gt; golesExistentes = obtenerGolesExistentes(actualizarEnfrentamientoApplicationDTO.enfrentamientoId());&#10;&#10;        aplicarActualizacionEnfrentamiento(actualizarEnfrentamientoApplicationDTO, enfrentamiento);&#10;&#10;        if (actualizarEnfrentamientoApplicationDTO.esPartidoFinalizado()) {&#10;            aplicarActualizacionEstadisticas(enfrentamiento);&#10;        }&#10;&#10;        Enfrentamiento enfrentamientoGuardado = enfrentamientoRepositoryPort.save(enfrentamiento);&#10;&#10;        if (actualizarEnfrentamientoApplicationDTO.tieneNuevosGolesElEnfrentamiento()) {&#10;            procesarGolesJugadoresEnfrentamiento(&#10;                    enfrentamientoGuardado,&#10;                    actualizarEnfrentamientoApplicationDTO.golesJugadoresLocal(),&#10;                    actualizarEnfrentamientoApplicationDTO.golesJugadoresVisitante(),&#10;                    golesExistentes&#10;            );&#10;        } else if (esOtroEstadoDiferenteAFinalizado(actualizarEnfrentamientoApplicationDTO, estadoPrevio)) {&#10;            procesarGolesJugadoresEnfrentamiento(&#10;                    enfrentamientoGuardado,&#10;                    Collections.emptyList(),&#10;                    Collections.emptyList(),&#10;                    golesExistentes&#10;            );&#10;        }&#10;&#10;        return enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                enfrentamientoGuardado,&#10;                mapearGolesPorEquipo(enfrentamientoGuardado).getFirst(),&#10;                mapearGolesPorEquipo(enfrentamientoGuardado).getSecond()&#10;        );&#10;&#10;    }&#10;&#10;    private boolean esOtroEstadoDiferenteAFinalizado(ActualizarEnfrentamientoApplicationDTO actualizarEnfrentamientoApplicationDTO, EstadoEnfrentamiento estadoPrevio) {&#10;        return estadoPrevio == EstadoEnfrentamiento.FINALIZADO &amp;&amp; actualizarEnfrentamientoApplicationDTO.estadoEnfrentamiento() != EstadoEnfrentamiento.FINALIZADO;&#10;    }&#10;&#10;    @Override&#10;    @Transactional(readOnly = true)&#10;    public Optional&lt;EnfrentamientoResponseDTO&gt; obtenerEnfrentamientoPorId(Long enfrentamientoId) {&#10;        return enfrentamientoRepositoryPort.findById(enfrentamientoId)&#10;                .map(enfrentamiento -&gt; enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                        enfrentamiento,&#10;                        mapearGolesPorEquipo(enfrentamiento).getFirst(),&#10;                        mapearGolesPorEquipo(enfrentamiento).getSecond()&#10;                ));&#10;    }&#10;&#10;    @Override&#10;    @Transactional(readOnly = true)&#10;    public List&lt;EnfrentamientoResponseDTO&gt; obtenerEnfrentamientosPorTorneo(Long torneoId) {&#10;        return enfrentamientoRepositoryPort.findByTorneoId(torneoId)&#10;                .stream()&#10;                .map(enfrentamiento -&gt; enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                        enfrentamiento,&#10;                        mapearGolesPorEquipo(enfrentamiento).getFirst(),&#10;                        mapearGolesPorEquipo(enfrentamiento).getSecond()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    @Transactional(readOnly = true)&#10;    public List&lt;EnfrentamientoResponseDTO&gt; obtenerEnfrentamientosPorEquipo(Long equipoId) {&#10;        return enfrentamientoRepositoryPort.findByEquipoLocalIdOrEquipoVisitanteId(equipoId, equipoId)&#10;                .stream()&#10;                .map(enfrentamiento -&gt; enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                        enfrentamiento,&#10;                        mapearGolesPorEquipo(enfrentamiento).getFirst(),&#10;                        mapearGolesPorEquipo(enfrentamiento).getSecond()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    @Transactional(readOnly = true)&#10;    public List&lt;EnfrentamientoResponseDTO&gt; obtenerEnfrentamientosPorFecha(LocalDateTime fechaInicio, LocalDateTime fechaFin) {&#10;        return enfrentamientoRepositoryPort.findByFechaHoraBetween(fechaInicio, fechaFin)&#10;                .stream()&#10;                .map(enfrentamiento -&gt; enfrentamientoApplicationMapper.toEnfrentamientoResponseDTO(&#10;                        enfrentamiento,&#10;                        mapearGolesPorEquipo(enfrentamiento).getFirst(),&#10;                        mapearGolesPorEquipo(enfrentamiento).getSecond()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void eliminarEnfrentamiento(Long enfrentamientoId) {&#10;        log.info(&quot;Iniciando proceso de eliminación del enfrentamiento ID: {}&quot;, enfrentamientoId);&#10;&#10;        Enfrentamiento enfrentamiento = buscarEnfrentamiento(enfrentamientoId);&#10;&#10;        // Si está finalizado, revertir las estadísticas&#10;        if (enfrentamiento.getEstado() == EstadoEnfrentamiento.FINALIZADO) {&#10;            log.info(&quot;Revirtiendo estadísticas del enfrentamiento finalizado ID: {}&quot;, enfrentamientoId);&#10;            aplicarRevertirEstadisticasEquipos(enfrentamiento);&#10;        }&#10;&#10;        // Eliminar los goles asociados&#10;        log.debug(&quot;Eliminando goles asociados al enfrentamiento ID: {}&quot;, enfrentamientoId);&#10;        golesJugadorUseCase.eliminarGolesJugadoresPorEnfrentamiento(enfrentamientoId);&#10;&#10;        // Eliminar el enfrentamiento&#10;        log.info(&quot;Eliminando enfrentamiento ID: {}&quot;, enfrentamientoId);&#10;        enfrentamientoRepositoryPort.deleteById(enfrentamientoId);&#10;&#10;        log.info(&quot;Enfrentamiento ID: {} eliminado exitosamente&quot;, enfrentamientoId);&#10;    }&#10;&#10;    private Pair&lt;List&lt;GolesJugadorResponseDTO&gt;, List&lt;GolesJugadorResponseDTO&gt;&gt; mapearGolesPorEquipo(Enfrentamiento enfrentamiento) {&#10;        List&lt;GolesJugador&gt; golesJugadores = obtenerGolesJugadores(enfrentamiento.getId());&#10;        if (golesJugadores.isEmpty()) {&#10;            return Pair.of(Collections.emptyList(), Collections.emptyList());&#10;        }&#10;&#10;        Map&lt;Long, Jugador&gt; jugadoresMap = obtenerMapaJugadores(golesJugadores);&#10;        GolesEquipo golesEquipo = separarGolesPorEquipo(golesJugadores, jugadoresMap, enfrentamiento);&#10;&#10;        return Pair.of(golesEquipo.golesLocal(), golesEquipo.golesVisitante());&#10;    }&#10;&#10;    private List&lt;GolesJugador&gt; obtenerGolesJugadores(Long enfrentamientoId) {&#10;        log.debug(&quot;Obteniendo goles para enfrentamiento id={}&quot;, enfrentamientoId);&#10;        return golesJugadorUseCase.obtenerGolesJugadoresPorEnfrentamiento(enfrentamientoId);&#10;    }&#10;&#10;    private Map&lt;Long, Jugador&gt; obtenerMapaJugadores(List&lt;GolesJugador&gt; golesJugadores) {&#10;        List&lt;Long&gt; jugadorIds = golesJugadores.stream()&#10;                .map(GolesJugador::getJugadorId)&#10;                .toList();&#10;&#10;        List&lt;Jugador&gt; jugadores = jugadorUseCase.buscarJugadoresPorIds(jugadorIds);&#10;        log.debug(&quot;Encontrados {} jugadores de {} solicitados&quot;, jugadores.size(), jugadorIds.size());&#10;&#10;        return jugadores.stream()&#10;                .collect(Collectors.toMap(Jugador::getId, Function.identity()));&#10;    }&#10;&#10;    private GolesEquipo separarGolesPorEquipo(List&lt;GolesJugador&gt; golesJugadores,&#10;                                              Map&lt;Long, Jugador&gt; jugadoresMap,&#10;                                              Enfrentamiento enfrentamiento) {&#10;        List&lt;GolesJugadorResponseDTO&gt; golesLocal = new ArrayList&lt;&gt;();&#10;        List&lt;GolesJugadorResponseDTO&gt; golesVisitante = new ArrayList&lt;&gt;();&#10;&#10;        for (GolesJugador gol : golesJugadores) {&#10;            Jugador jugador = jugadoresMap.get(gol.getJugadorId());&#10;            if (jugador == null) {&#10;                log.warn(&quot;Jugador con id {} no encontrado para goles&quot;, gol.getJugadorId());&#10;                continue;&#10;            }&#10;&#10;            GolesJugadorResponseDTO dto = crearGolesJugadorDTO(jugador, gol);&#10;            asignarGolesAEquipo(dto, jugador, enfrentamiento, golesLocal, golesVisitante);&#10;        }&#10;&#10;        return new GolesEquipo(golesLocal, golesVisitante);&#10;    }&#10;&#10;    private GolesJugadorResponseDTO crearGolesJugadorDTO(Jugador jugador, GolesJugador gol) {&#10;        return new GolesJugadorResponseDTO(&#10;                jugador.getId(),&#10;                jugador.getNombre(),&#10;                jugador.getApellido(),&#10;                gol.getCantidadGoles()&#10;        );&#10;    }&#10;&#10;    private void asignarGolesAEquipo(GolesJugadorResponseDTO dto,&#10;                                     Jugador jugador,&#10;                                     Enfrentamiento enfrentamiento,&#10;                                     List&lt;GolesJugadorResponseDTO&gt; golesLocal,&#10;                                     List&lt;GolesJugadorResponseDTO&gt; golesVisitante) {&#10;        if (jugador.getEquipoId().equals(enfrentamiento.getEquipoLocalId())) {&#10;            golesLocal.add(dto);&#10;        } else if (jugador.getEquipoId().equals(enfrentamiento.getEquipoVisitanteId())) {&#10;            golesVisitante.add(dto);&#10;        } else {&#10;            log.warn(&quot;Jugador {} no pertenece al enfrentamiento {}&quot;, jugador.getId(), enfrentamiento.getId());&#10;        }&#10;    }&#10;&#10;    private void revertirEstadisticasSiYaFinalizado(Enfrentamiento enfrentamiento, EstadoEnfrentamiento estadoPrevio) {&#10;        if (estadoPrevio == EstadoEnfrentamiento.FINALIZADO) {&#10;            log.info(&quot;Revirtiendo estadísticas para enfrentamiento {} (Local: {}, Visitante: {})&quot;,&#10;                    enfrentamiento.getId(),&#10;                    enfrentamiento.getEquipoLocalId(),&#10;                    enfrentamiento.getEquipoVisitanteId());&#10;            aplicarRevertirEstadisticasEquipos(enfrentamiento);&#10;        }&#10;    }&#10;&#10;    private void aplicarRevertirEstadisticasEquipos(Enfrentamiento enfrentamiento) {&#10;        estadisticasEquipoUseCase.revertirEstadisticasEquipo(&#10;                enfrentamiento.getGolesLocal(),&#10;                enfrentamiento.getGolesVisitante(),&#10;                enfrentamiento.getEquipoLocalId(),&#10;                enfrentamiento.getEquipoVisitanteId()&#10;        );&#10;    }&#10;&#10;    private void aplicarActualizacionEstadisticas(Enfrentamiento enfrentamiento) {&#10;        estadisticasEquipoUseCase.actualizarEstadisticas(&#10;                enfrentamiento.getEquipoLocalId(),&#10;                enfrentamiento.getEquipoVisitanteId(),&#10;                enfrentamiento.getGolesLocal(),&#10;                enfrentamiento.getGolesVisitante());&#10;    }&#10;&#10;    private void aplicarActualizacionEnfrentamiento(ActualizarEnfrentamientoApplicationDTO actualizarEnfrentamientoApplicationDTO, Enfrentamiento enfrentamiento) {&#10;        enfrentamiento.actualizar(&#10;                actualizarEnfrentamientoApplicationDTO.fechaHora(),&#10;                actualizarEnfrentamientoApplicationDTO.cancha(),&#10;                actualizarEnfrentamientoApplicationDTO.estadoEnfrentamiento(),&#10;                actualizarEnfrentamientoApplicationDTO.golesLocal(),&#10;                actualizarEnfrentamientoApplicationDTO.golesVisitante()&#10;        );&#10;    }&#10;&#10;    private void procesarGolesJugadoresEnfrentamiento(Enfrentamiento enfrentamiento,&#10;                                                      List&lt;GolesJugadorApplicationDTO&gt; golesJugadoresLocal,&#10;                                                      List&lt;GolesJugadorApplicationDTO&gt; golesJugadoresVisitante,&#10;                                                      List&lt;GolesJugador&gt; golesExistentes) {&#10;        golesJugadorUseCase.procesarGolesJugadores(&#10;                enfrentamiento.getId(),&#10;                enfrentamiento.getEquipoLocalId(),&#10;                enfrentamiento.getEquipoVisitanteId(),&#10;                golesJugadoresLocal,&#10;                golesJugadoresVisitante,&#10;                golesExistentes&#10;        );&#10;    }&#10;&#10;    private List&lt;GolesJugador&gt; obtenerGolesExistentes(Long idEnfrentamiento) {&#10;        return golesJugadorUseCase.obtenerGolesJugadoresPorEnfrentamiento(idEnfrentamiento);&#10;    }&#10;&#10;    private Enfrentamiento buscarEnfrentamiento(Long enfrentamientoId) {&#10;        return enfrentamientoRepositoryPort.findById(enfrentamientoId)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Enfrentamiento&quot;, enfrentamientoId));&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/torneo-futnorte-api/src/main/java/com/futnorte/torneo/domain/ports/in/GolesJugadorUseCase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/torneo-futnorte-api/src/main/java/com/futnorte/torneo/domain/ports/in/GolesJugadorUseCase.java" />
              <option name="originalContent" value="package com.futnorte.torneo.domain.ports.in;&#10;&#10;import com.futnorte.torneo.application.dto.GolesJugadorApplicationDTO;&#10;import com.futnorte.torneo.domain.entities.GolesJugador;&#10;&#10;import java.util.List;&#10;&#10;public interface GolesJugadorUseCase {&#10;&#10;    List&lt;GolesJugador&gt; obtenerGolesJugadoresPorEnfrentamiento(Long enfrentamientoId);&#10;&#10;    void procesarGolesJugadores(Long enfrentamientoId,&#10;                                Long equipoLocalId,&#10;                                Long equipoVisitanteId,&#10;                                List&lt;GolesJugadorApplicationDTO&gt; golesJugadoresLocal,&#10;                                List&lt;GolesJugadorApplicationDTO&gt; golesJugadoresVisitante,&#10;                                List&lt;GolesJugador&gt; golesExistentesAntes);&#10;                                &#10;    void eliminarGolesJugadoresPorEnfrentamiento(Long enfrentamientoId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.futnorte.torneo.domain.ports.in;&#10;&#10;import com.futnorte.torneo.application.dto.GolesJugadorApplicationDTO;&#10;import com.futnorte.torneo.domain.entities.GolesJugador;&#10;&#10;import java.util.List;&#10;&#10;public interface GolesJugadorUseCase {&#10;&#10;    List&lt;GolesJugador&gt; obtenerGolesJugadoresPorEnfrentamiento(Long enfrentamientoId);&#10;&#10;    void procesarGolesJugadores(Long enfrentamientoId,&#10;                                Long equipoLocalId,&#10;                                Long equipoVisitanteId,&#10;                                List&lt;GolesJugadorApplicationDTO&gt; golesJugadoresLocal,&#10;                                List&lt;GolesJugadorApplicationDTO&gt; golesJugadoresVisitante,&#10;                                List&lt;GolesJugador&gt; golesExistentesAntes);&#10;                                &#10;    void eliminarGolesJugadoresPorEnfrentamiento(Long enfrentamientoId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>